# -*- coding: utf-8 -*-
"""Riot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pFy5l_W14IfXVaYah1hKv1fvyPdePZbU
"""

pip install riotwatcher

from riotwatcher import LolWatcher, ApiError

lol_watcher = LolWatcher('RGAPI-0575f455-96e6-4f22-aaf9-2a9e90419350')

my_region = 'br1'

me = lol_watcher.summoner.by_name(my_region, 'Saal')
print(me)

# all objects are returned (by default) as a dict
# lets see if i got diamond yet (i probably didnt)
my_ranked_stats = lol_watcher.league.by_summoner(my_region, me['id'])
print(my_ranked_stats)

# First we get the latest version of the game from data dragon
versions = lol_watcher.data_dragon.versions_for_region(my_region)
champions_version = versions['n']['champion']

# Lets get some champions
current_champ_list = lol_watcher.data_dragon.champions(champions_version)
print(current_champ_list)

# For Riot's API, the 404 status code indicates that the requested data wasn't found and
# should be expected to occur in normal operation, as in the case of a an
# invalid summoner name, match ID, etc.
#
# The 429 status code indicates that the user has sent too many requests
# in a given amount of time ("rate limiting").

try:
    response = lol_watcher.summoner.by_name(my_region, 'this_is_probably_not_anyones_summoner_name')
except ApiError as err:
    if err.response.status_code == 429:
        print('We should retry in {} seconds.'.format(err.headers['Retry-After']))
        print('this retry-after is handled by default by the RiotWatcher library')
        print('future requests wait until the retry-after time passes')
    elif err.response.status_code == 404:
        print('Summoner with that ridiculous name not found.')
    else:
        raise

"""## teste 2"""

from riotwatcher import LolWatcher, ApiError
import pandas as pd

# golbal variables
api_key = 'RGAPI-0575f455-96e6-4f22-aaf9-2a9e90419350'
watcher = LolWatcher(api_key)
my_region = 'br1'

me = watcher.summoner.by_name(my_region, 'Saal')
print(me)

# Return the rank status for Saal
my_ranked_stats = watcher.league.by_summoner(my_region, me['id'])
print(my_ranked_stats)

df = pd.DataFrame (my_ranked_stats, columns = ['queueType','tier','rank','summonerName','leaguePoints','wins','losses'])
print (df)

my_matches = watcher.match.matchlist_by_puuid(my_region, me['puuid'])

# fetch last match detail
last_match = my_matches[0]
match_detail = watcher.match.by_id(my_region, last_match)

participants = []
for row in match_detail:
    participants_row = {}
    #participants_row['champion'] = row['championId']
    #participants_row['spell1'] = row['spell1Id']
    #participants_row['spell2'] = row['spell2Id']
    #participants_row['win'] = row['stats']['win']
    #participants_row['kills'] = row['stats']['kills']
    #participants_row['deaths'] = row['stats']['deaths']
    #participants_row['assists'] = row['stats']['assists']
    #participants_row['totalDamageDealt'] = row['stats']['totalDamageDealt']
    #participants_row['goldEarned'] = row['stats']['goldEarned']
    #participants_row['champLevel'] = row['stats']['champLevel']
    #participants_row['totalMinionsKilled'] = row['stats']['totalMinionsKilled']
    #participants_row['item0'] = row['stats']['item0']
    #participants_row['item1'] = row['stats']['item1']
    #participants.append(participants_row)
df = pd.DataFrame(participants)
df

match_detail = watcher.match.by_id(my_region, last_match)
print(match_detail)

df = pd.DataFrame(match_detail)
print(df)

my_matches = watcher.match.matchlist_by_puuid(my_region, me['puuid'])

# fetch last match detail
last_match = my_matches['matches'][0]
match_detail = watcher.match.by_id(my_region, last_match['gameId'])

participants = []
for row in match_detail['participants']:
    participants_row = {}
    participants_row['champion'] = row['championId']
    participants_row['spell1'] = row['spell1Id']
    participants_row['spell2'] = row['spell2Id']
    participants_row['win'] = row['stats']['win']
    participants_row['kills'] = row['stats']['kills']
    participants_row['deaths'] = row['stats']['deaths']
    participants_row['assists'] = row['stats']['assists']
    participants_row['totalDamageDealt'] = row['stats']['totalDamageDealt']
    participants_row['goldEarned'] = row['stats']['goldEarned']
    participants_row['champLevel'] = row['stats']['champLevel']
    participants_row['totalMinionsKilled'] = row['stats']['totalMinionsKilled']
    participants_row['item0'] = row['stats']['item0']
    participants_row['item1'] = row['stats']['item1']
    participants.append(participants_row)
df = pd.DataFrame(participants)
df

my_matches = list(map(lambda my_matches: my_matches.replace('BR1_', ''), my_matches))

my_matches = list(map(int, my_matches))